"use client"

import * as React from "react"
import { motion } from "framer-motion"
import { Heart, Eye, Share2, Download, Filter, Search, Grid3X3, List, ChevronDown } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import Image from "next/image"

// Mock data for gallery NFTs
const featuredNFTs = [
  {
    id: 1,
    title: "Cosmic Dreams #001",
    creator: "AIArtist_CX",
    price: "2.5 ETH",
    chain: "Ethereum",
    image: "/api/placeholder/400/400",
    likes: 234,
    views: 1205,
    category: "Abstract",
    description: "A mesmerizing journey through cosmic landscapes generated by advanced AI algorithms."
  },
  {
    id: 2,
    title: "Digital Bloom",
    creator: "TechFlora",
    price: "1.8 BTC",
    chain: "Bitcoin",
    image: "/api/placeholder/400/400",
    likes: 189,
    views: 876,
    category: "Nature",
    description: "Blooming flowers reimagined through the lens of artificial intelligence."
  },
  {
    id: 3,
    title: "Neural Pathways",
    creator: "MindMachine",
    price: "150 BNB",
    chain: "BSC",
    image: "/api/placeholder/400/400",
    likes: 312,
    views: 1567,
    category: "Sci-Fi",
    description: "Visualization of neural networks and synaptic connections in digital art form."
  },
  {
    id: 4,
    title: "Quantum Fragments",
    creator: "QuantumArt",
    price: "0.75 ETH",
    chain: "Ethereum",
    image: "/api/placeholder/400/400",
    likes: 167,
    views: 743,
    category: "Abstract",
    description: "Fragmented reality captured through quantum-inspired AI generation."
  },
  {
    id: 5,
    title: "Urban Genesis",
    creator: "CityScapes_AI",
    price: "0.5 BTC",
    chain: "Bitcoin",
    image: "/api/placeholder/400/400",
    likes: 298,
    views: 1134,
    category: "Architecture",
    description: "The birth of futuristic cities as envisioned by AI urban planners."
  },
  {
    id: 6,
    title: "Ethereal Beings",
    creator: "SpiritualTech",
    price: "200 BNB",
    chain: "BSC",
    image: "/api/placeholder/400/400",
    likes: 445,
    views: 2103,
    category: "Fantasy",
    description: "Mystical creatures brought to life through AI-powered imagination."
  }
]

const allNFTs = [
  ...featuredNFTs,
  {
    id: 7,
    title: "Ocean Depths",
    creator: "AquaAI",
    price: "1.2 ETH",
    chain: "Ethereum",
    image: "/api/placeholder/400/400",
    likes: 156,
    views: 678,
    category: "Nature",
    description: "Deep sea mysteries revealed through AI exploration."
  },
  {
    id: 8,
    title: "Mechanical Symphony",
    creator: "RoboComposer",
    price: "0.8 BTC",
    chain: "Bitcoin",
    image: "/api/placeholder/400/400",
    likes: 223,
    views: 967,
    category: "Sci-Fi",
    description: "The harmony of gears and circuits in digital orchestration."
  },
  {
    id: 9,
    title: "Desert Mirage",
    creator: "SandVisions",
    price: "90 BNB",
    chain: "BSC",
    image: "/api/placeholder/400/400",
    likes: 187,
    views: 834,
    category: "Landscape",
    description: "Shifting sands and desert illusions captured by AI perception."
  }
]

const categories = ["All", "Abstract", "Nature", "Sci-Fi", "Architecture", "Fantasy", "Landscape"]
const chains = ["All Chains", "Ethereum", "Bitcoin", "BSC"]
const sortOptions = ["Recent", "Most Liked", "Most Viewed", "Price: Low to High", "Price: High to Low"]

export default function GalleryPage() {
  const [viewMode, setViewMode] = React.useState<"grid" | "list">("grid")
  const [selectedCategory, setSelectedCategory] = React.useState("All")
  const [selectedChain, setSelectedChain] = React.useState("All Chains")
  const [sortBy, setSortBy] = React.useState("Recent")
  const [searchQuery, setSearchQuery] = React.useState("")
  const [selectedNFT, setSelectedNFT] = React.useState<typeof featuredNFTs[0] | null>(null)

  const filteredNFTs = React.useMemo(() => {
    let filtered = allNFTs.filter(nft => {
      const matchesCategory = selectedCategory === "All" || nft.category === selectedCategory
      const matchesChain = selectedChain === "All Chains" || nft.chain === selectedChain
      const matchesSearch = nft.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          nft.creator.toLowerCase().includes(searchQuery.toLowerCase())
      return matchesCategory && matchesChain && matchesSearch
    })

    // Sort filtered results
    switch (sortBy) {
      case "Most Liked":
        filtered = filtered.sort((a, b) => b.likes - a.likes)
        break
      case "Most Viewed":
        filtered = filtered.sort((a, b) => b.views - a.views)
        break
      case "Price: Low to High":
        // Simple price sorting (in reality, you'd convert to common currency)
        filtered = filtered.sort((a, b) => parseFloat(a.price) - parseFloat(b.price))
        break
      case "Price: High to Low":
        filtered = filtered.sort((a, b) => parseFloat(b.price) - parseFloat(a.price))
        break
      default:
        // Recent - keep original order
        break
    }

    return filtered
  }, [selectedCategory, selectedChain, searchQuery, sortBy])

  const NFTCard = ({ nft, index }: { nft: typeof featuredNFTs[0]; index: number }) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      className={viewMode === "grid" ? "" : "flex"}
    >
      <Card className="group overflow-hidden hover:shadow-lg transition-all duration-300 bg-card border">
        <div className={`relative ${viewMode === "grid" ? "aspect-square" : "w-48 h-48 flex-shrink-0"}`}>
          <div className="w-full h-full bg-muted rounded-t-lg flex items-center justify-center">
            <div className="text-6xl">🎨</div>
          </div>
          <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center space-x-4">
            <Dialog>
              <DialogTrigger asChild>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => setSelectedNFT(nft)}
                  className="opacity-90 hover:opacity-100"
                >
                  <Eye className="w-4 h-4 mr-1" />
                  View
                </Button>
              </DialogTrigger>
            </Dialog>
            <Button size="sm" variant="secondary" className="opacity-90 hover:opacity-100">
              <Share2 className="w-4 h-4" />
            </Button>
          </div>
          <Badge 
            variant="secondary" 
            className="absolute top-2 right-2 bg-background/80"
          >
            {nft.chain}
          </Badge>
        </div>
        <CardContent className={`p-4 ${viewMode === "list" ? "flex-1" : ""}`}>
          <div className="flex items-start justify-between mb-2">
            <h3 className="font-semibold text-lg truncate">{nft.title}</h3>
            <Badge variant="outline" className="ml-2 text-xs">
              {nft.category}
            </Badge>
          </div>
          <p className="text-sm text-muted-foreground mb-3">by {nft.creator}</p>
          {viewMode === "list" && (
            <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
              {nft.description}
            </p>
          )}
          <div className="flex items-center justify-between">
            <span className="font-bold text-primary">{nft.price}</span>
            <div className="flex items-center space-x-3 text-sm text-muted-foreground">
              <div className="flex items-center space-x-1">
                <Heart className="w-4 h-4" />
                <span>{nft.likes}</span>
              </div>
              <div className="flex items-center space-x-1">
                <Eye className="w-4 h-4" />
                <span>{nft.views}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )

  return (
    <>
      <Header />
      <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="pt-24 pb-12 px-4 sm:px-6 lg:px-8">
        <div className="container mx-auto max-w-7xl">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="text-center"
          >
            <Badge variant="secondary" className="mb-4">
              Gallery
            </Badge>
            <h1 className="text-4xl md:text-6xl font-bold text-foreground mb-6">
              Discover Amazing NFTs
            </h1>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
              Explore a curated collection of AI-generated NFTs created by artists from around the world. 
              Each piece is unique and minted across multiple blockchain networks.
            </p>
          </motion.div>
        </div>
      </section>

      {/* Featured Section */}
      <section className="pb-12 px-4 sm:px-6 lg:px-8">
        <div className="container mx-auto max-w-7xl">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="mb-8"
          >
            <h2 className="text-3xl font-bold mb-4">Featured Artwork</h2>
            <p className="text-muted-foreground">Handpicked masterpieces from our community</p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            {featuredNFTs.slice(0, 3).map((nft, index) => (
              <NFTCard key={nft.id} nft={nft} index={index} />
            ))}
          </div>
        </div>
      </section>

      {/* Main Gallery Section */}
      <section className="py-12 px-4 sm:px-6 lg:px-8 bg-muted/30">
        <div className="container mx-auto max-w-7xl">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            {/* Filters and Controls */}
            <div className="mb-8 space-y-4">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <h2 className="text-3xl font-bold">All Artwork</h2>
                <div className="flex items-center space-x-2">
                  <Button
                    variant={viewMode === "grid" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setViewMode("grid")}
                  >
                    <Grid3X3 className="w-4 h-4" />
                  </Button>
                  <Button
                    variant={viewMode === "list" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setViewMode("list")}
                  >
                    <List className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1">
                  <Input
                    placeholder="Search NFTs, creators..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full"
                  />
                </div>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className="w-full md:w-48">
                    <SelectValue placeholder="Category" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem key={category} value={category}>
                        {category}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={selectedChain} onValueChange={setSelectedChain}>
                  <SelectTrigger className="w-full md:w-48">
                    <SelectValue placeholder="Blockchain" />
                  </SelectTrigger>
                  <SelectContent>
                    {chains.map((chain) => (
                      <SelectItem key={chain} value={chain}>
                        {chain}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger className="w-full md:w-48">
                    <SelectValue placeholder="Sort by" />
                  </SelectTrigger>
                  <SelectContent>
                    {sortOptions.map((option) => (
                      <SelectItem key={option} value={option}>
                        {option}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="text-sm text-muted-foreground">
                Showing {filteredNFTs.length} results
              </div>
            </div>

            {/* NFT Grid/List */}
            <div className={viewMode === "grid" 
              ? "grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" 
              : "space-y-4"
            }>
              {filteredNFTs.map((nft, index) => (
                <NFTCard key={nft.id} nft={nft} index={index} />
              ))}
            </div>

            {filteredNFTs.length === 0 && (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">🔍</div>
                <h3 className="text-xl font-semibold mb-2">No NFTs found</h3>
                <p className="text-muted-foreground">
                  Try adjusting your search criteria or browse all categories.
                </p>
              </div>
            )}
          </motion.div>
        </div>
      </section>

      {/* NFT Detail Modal */}
      <Dialog open={!!selectedNFT} onOpenChange={() => setSelectedNFT(null)}>
        <DialogContent className="max-w-4xl">
          {selectedNFT && (
            <>
              <DialogHeader>
                <DialogTitle className="text-2xl">{selectedNFT.title}</DialogTitle>
                <DialogDescription>
                  by {selectedNFT.creator} • {selectedNFT.chain}
                </DialogDescription>
              </DialogHeader>
              <div className="grid md:grid-cols-2 gap-6">
                <div className="aspect-square bg-muted rounded-lg flex items-center justify-center">
                  <div className="text-8xl">🎨</div>
                </div>
                <div className="space-y-6">
                  <div>
                    <h3 className="font-semibold mb-2">Description</h3>
                    <p className="text-muted-foreground">{selectedNFT.description}</p>
                  </div>
                  <div className="flex items-center space-x-6">
                    <div className="flex items-center space-x-2">
                      <Heart className="w-5 h-5 text-red-500" />
                      <span>{selectedNFT.likes} likes</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Eye className="w-5 h-5 text-blue-500" />
                      <span>{selectedNFT.views} views</span>
                    </div>
                  </div>
                  <div className="border-t pt-4">
                    <div className="flex items-center justify-between mb-4">
                      <span className="text-muted-foreground">Current Price</span>
                      <span className="text-2xl font-bold text-primary">{selectedNFT.price}</span>
                    </div>
                    <div className="flex space-x-3">
                      <Button className="flex-1">
                        Make Offer
                      </Button>
                      <Button variant="outline" size="icon">
                        <Heart className="w-4 h-4" />
                      </Button>
                      <Button variant="outline" size="icon">
                        <Share2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )}
        </DialogContent>
      </Dialog>
      </div>
      <Footer />
    </>
  )
}
